local gooey = require "gooey.gooey"
local monarch = require "monarch.monarch"
local Gamestate = require "game.gamestate.gamestate"

local info_node

local red = vmath.vector4(1, 0, 0, 1)

local function update_input(input)
    local placeholder_node
    local button_node

    if input.node_id == hash("game_id_text") then
        placeholder_node = gui.get_node("game_id_placeholder")
        button_node = gui.get_node("game_id_button")
    else
        placeholder_node = gui.get_node("password_placeholder")
        button_node = gui.get_node("password_button")
    end

    if #input.text > 0 then
        gui.set_alpha(placeholder_node, 0)
    else
        gui.set_alpha(placeholder_node, 0.75)
    end

    if input.selected then
        gui.play_flipbook(button_node, "input_field_active")
    else
        gui.play_flipbook(button_node, "input_field")
    end
end

local function enter_id_and_password()
    if Gamestate.is_creating() == true then return end

    gui.set_text(info_node, "... Accessing Game ...")
    Gamestate.set_creating(true)

    msg.post("controller:/controller#colyseus", "resume_game", { game_id = game_id_g.text, password = resume_password.text })
end

function on_input(self, action_id, action)
    -- GOOEY UI
    local group = gooey.group("resume_menu_group", function()
        game_id_g = gooey.input("game_id_text", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, { max_length = 20, allowed_characters = "[%d%.]" }, update_input)

        resume_password = gooey.input("password_text", gui.KEYBOARD_TYPE_PASSWORD, action_id, action, { max_length = 12 }, update_input)

        gooey.button("resume_button", action_id, action, function()
            enter_id_and_password()
        end, update_button)

        gooey.button("back_button", action_id, action, function()
            monarch.replace("start_menu")
        end, update_button)
    end)
    
    -- KEYPRESSES
    if action.pressed then
        if action_id == hash("esc") then
            monarch.replace("start_menu")
        elseif action_id == hash("enter") then
            enter_id_and_password()
        elseif action_id == hash("tab") then
            if game_id_g.selected == true then
                game_id_g.selected = false
                resume_password.selected = true
            elseif resume_password.selected == true then
                game_id_g.selected = true
                resume_password.selected = false
            else
                game_id_g.selected = true
                resume_password.selected = false
            end
        end
    end

    return group.consumed
end

function on_message(self, message_id, message)
    Gamestate.set_creating(false)

    if message_id == hash("connection_error") then
        gui.set_color(info_node, red)
        gui.set_text(info_node, "Error: Could not connect to the server.")
    elseif message_id == hash("rooms_error") then
        gui.set_color(info_node, red)
        gui.set_text(info_node, "Error: Could not retrieve rooms from server.")
    elseif message_id == hash("rebuild_error") then
        gui.set_color(info_node, red)
        gui.set_text(info_node, message.error_message)
    elseif message_id == hash("reset_text") then
        gui.set_color(info_node, vmath.vector4(0.878, 0.878, 0.878, 1))
        gui.set_text(info_node, "Fill out both fields.")

        local game_id_node = gui.get_node("game_id_text")
        gui.set_text(game_id_node, "")

        local resume_password_node = gui.get_node("password_text")
        gui.set_text(resume_password_node, "")
    end
end

function init(self)
    gooey.acquire_input()

    info_node = gui.get_node("info_text")

    gui.set_render_order(1)
end