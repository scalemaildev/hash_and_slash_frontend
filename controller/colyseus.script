local monarch = require "monarch.monarch"
local ColyseusClient = require "colyseus.client"
local Gamestate = require "game.gamestate.gamestate"
local MessageReel = require "game.gamestate.message_reel"

local client
local room

local function update_round(round)
	Gamestate.set_round(round)
	msg.post("game:/gui#gui", "update_round_text", { new_round = round })
	msg.post("game:/gui#gui", "update_message_reel")
end

local function update_game_result(result)
	if result == "VICTORY" or result == "DEFEAT" then
		Gamestate.set_game_result(result)
		msg.post("controller:/controller#controller", "goto_end_splash")
	end
end

local function update_vis_pos(bool, pos)
	if bool == true then
		Gamestate.see_vis_pos(pos)
		msg.post("game:/controller#tiles", "untint_tile", { pos = pos })
	else
		Gamestate.unsee_vis_pos(pos)
		msg.post("game:/controller#tiles", "tint_tile", { pos = pos })
	end
end

local function add_tile(tile)
	msg.post("game:/controller#tiles", "create_tile", { pos = tile.pos, tile_type = tile.symbol })

	-- force recalc on reloading/observing
	local _pos = tostring(tile.pos)
	local vis = Gamestate.get_vis_pos(_pos)
	if vis ~= true then
		msg.post("game:/controller#tiles", "tint_tile", { pos = tile.pos })
	end
end

local function add_actor(actor)
	msg.post("game:/controller#actors", "create_actor", { 
		id = actor.id,
		pos = actor.pos,
		actor_type = actor.symbol
	})

	if actor.id == 0 then
		Gamestate.update_player_stats(actor.hp, actor.maxHp)
		msg.post("game:/gui#gui", "update_player_hp_text", { hp = actor.hp, max_hp = actor.maxHp })
	end
end

local function update_actor(actor)
	msg.post("game:/controller#actors", "update_actor", { 
		id = actor.id,
		pos = actor.pos,
		actor_type = actor.symbol 
	})

	if actor.id == 0 then
		Gamestate.update_player_stats(actor.hp, actor.maxHp)
		msg.post("game:/gui#gui", "update_player_hp_text", { hp = actor.hp, max_hp = actor.maxHp })
	end
end

local function handle_gamestate_updates()
	-- General State Updates
	room.state['on_change'] = function (changes)
		for _, change in pairs(changes) do
			if change.field == "round" and not Gamestate.is_creating() then
				update_round(change.value)
			elseif change.field == "gameResult" and not Gamestate.is_creating() then
				update_game_result(change.value)
			end
		end
	end

	-- Visible Positions
	room.state.vis['on_add'] = function (val, key)
		update_vis_pos(val, key)
	end

	room.state.vis['on_change'] = function (val, key)
		update_vis_pos(val, key)
	end

	room.state.vis['on_remove'] = function (_, key)
		Gamestate.clear_vis_pos(key)
	end

	-- Known Tiles
	room.state.tiles['on_add'] = function (tile, _)
		add_tile(tile)
	end

	room.state.tiles['on_remove'] = function (tile, _)
		msg.post("game:/controller#tiles", "remove_tile", { pos = tile.pos })
	end

	-- Items
	room.state.items['on_add'] = function (item, _)
		msg.post("game:/controller#tiles", "corpsify_tile", { pos = item.pos })
	end

	-- Actors
	room.state.actors['on_add'] = function (actor, _)
		add_actor(actor)
	end

	room.state.actors['on_change'] = function (actor, _)
		update_actor(actor)
	end

	room.state.actors['on_remove'] = function (actor, _)
		msg.post("game:/controller#actors", "remove_actor", { id = actor.id })
	end

	-- Messages
	room.state.messages['on_add'] = function (message, _)
		MessageReel.append_message(message)
	end
end

local function handle_room_updates()
	room:on_message("setGameActive", function(message)
		msg.post("game:/gui#gui", "update_active_game", { is_active = message.isActive })
	end)

	room:on_message("updateObsCount", function(message)
		msg.post("game:/gui#gui", "update_obs_count", { new_count = message.newCount })
	end)
end

local function create_new_game(password)
	client:create("gameRoom", { isObserver = false }, function(err, _room)
		if (err ~= nil) then
			Gamestate.set_creating(false)
			monarch.post("new_game_menu", "connection_error")
			print("join error: " .. err)
			return
		end

		room = _room
		handle_gamestate_updates()
		handle_room_updates()

		room:send("startNewGame", { password = password })

		room:on_message("startNewGame", function(message)
			Gamestate.set_creating(false)

			if message.success == true then
				Gamestate.set_game_id(message.topicId)
				msg.post("game:/gui#gui", "update_game_id")
				msg.post("/controller#controller", "goto_game")
			else
				monarch.post("new_game_menu", "creation_error", { error_message = message.message })
				room = nil
			end
		end)
		
	end)
end

local function resume_game(game_id, password)
	client:get_available_rooms("gameRoom", function(err, rooms)
		if (err) then
			Gamestate.set_creating(false)
			monarch.post("resume_menu", "rooms_error")
			print("rooms error: " .. err)
			return
		end

		for _, game in pairs(rooms) do
			if game.metadata.gameAddress == game_id then
				if game.metadata.gameActive == true then
					monarch.post("resume_menu", "rebuild_error", { error_message = "Error: This game is currently live." })
				elseif game.metadata.letterBoxLength > 0 then
					monarch.post("resume_menu", "rebuild_error", { error_message = "Error: This game's letterbox is still processing (" .. game.metadata.letterBoxLength .. " messages remain)" })
				else
					monarch.post("resume_menu", "rebuild_error", { error_message = "Error: This game is in post-processing, and should be ready soon." })
				end

				Gamestate.set_creating(false)
				return
			end
		end

		client:create("gameRoom", { isObserver = false }, function(err, _room)
			if (err ~= nil) then
				Gamestate.set_creating(false)
				monarch.post("resume_menu", "connection_error")
				print("join error: " .. err)
				return
			end

			room = _room
			handle_gamestate_updates()
			handle_room_updates()

			room:send("rebuildGame", { gameAddress = game_id, password = password })

			room:on_message("rebuildGame", function(message)
				Gamestate.set_creating(false)

				if message.success == true then
					Gamestate.set_game_id(message.topicId)
					msg.post("game:/gui#gui", "update_message_reel")
					msg.post("game:/gui#gui", "update_game_id")
					msg.post("/controller#controller", "goto_game")
				else
					Gamestate.reset()
					msg.post("game:/controller#tiles", "clear_tiles")
					msg.post("game:/controller#actors", "clear_actors")
					MessageReel.clear()
					monarch.post("resume_menu", "rebuild_error", { error_message = message.message })
					room = nil
				end
			end)
		end)
	end)
end

local function observe_game(room_id, game_id)
	client:join_by_id(room_id, { isObserver = true }, function(err, _room)
		if (err ~= nil) then
			monarch.post("observe_menu", "join_error")
			Gamestate.set_creating(false)
			print("join error: " .. err)
			return
		end

		room = _room
		handle_gamestate_updates()
		handle_room_updates()

		Gamestate.set_creating(false)
		Gamestate.set_game_id(game_id)
		Gamestate.set_observer_mode(true)
		msg.post("game:/gui#gui", "update_message_reel")
		msg.post("game:/gui#gui", "update_game_id")
		msg.post("/controller#controller", "goto_game")
	end)
end

function resolve_player_action(action)
	if room.state.gameStatus ~= "PLAYER_TURN" then return end
	
	room:send("playerAction", action)
end

function get_active_games()
	Gamestate.clear_active_games()
	
	local rooms = client:get_available_rooms("gameRoom", function(err, rooms)
		if (err) then
			if monarch.is_visible("observe_menu") then
				monarch.post("observe_menu", "fetch_error")
			end
			print(err);
			return
		end

		for i, room in pairs(rooms) do
			if room.metadata.gameActive == true then
				Gamestate.add_game(room)
			end
		end

		monarch.post("observe_menu", "refresh_list")
	end);
end

function on_message(self, message_id, message, sender)
	if message_id == hash("create_new_game") then
		local room_id = create_new_game(message.password)
	elseif message_id == hash("resume_game") then
		local room_id = resume_game(message.game_id, message.password)
	elseif message_id == hash("player_action") then
		resolve_player_action(message)
	elseif message_id == hash("get_active_games") then
		get_active_games()
	elseif message_id == hash("observe_game") then
		local room_id = observe_game(message.room_id, message.game_id)
	elseif message_id == hash("quit_game") then
		room:send("playerQuitGame") -- TODO dependent on whether observing
		room:leave()
		room = nil
	end
end

function init(self)
	if sys.get_engine_info().is_debug then
		pprint('LOCAL SERVER')
		client = ColyseusClient.new("ws://localhost:2567")
	else
		pprint('PRODUCTION SERVER')
		client = ColyseusClient.new("wss://noqaut.colyseus.dev")
	end
end