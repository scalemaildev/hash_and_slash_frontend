local gooey = require "gooey.gooey"
local monarch = require "monarch.monarch"
local Gamestate = require "game.gamestate.gamestate"

local info_node
local list_container_node
local scroller_container_node

local red = vmath.vector4(1, 0, 0, 1)

local function show_active_games_list()
    gui.set_enabled(info_node, false)
    gui.set_enabled(list_container_node, true)
    gui.set_enabled(scroller_container_node, true)
end

local function hide_active_games_list()
    gui.set_enabled(info_node, true)
    gui.set_enabled(list_container_node, false)
    gui.set_enabled(scroller_container_node, false)
end

local function observe_game(list_item)
    if Gamestate.is_creating() == true then return end

    Gamestate.set_creating(true)

    local game_id = list_item.metadata.gameAddress
    
    gui.set_color(info_node, vmath.vector4(0.878, 0.878, 0.878, 1))
    gui.set_text(info_node, "... Joining Game: " .. game_id .. " ...")
    hide_active_games_list()

    msg.post("controller:/controller#colyseus", "observe_game", { room_id = list_item.roomId, game_id = game_id })
end

local function get_active_games()
    gui.set_color(info_node, vmath.vector4(0.878, 0.878, 0.878, 1))
    gui.set_text(info_node, "... Fetching Games ...")
    hide_active_games_list()
    
    msg.post("controller:/controller#colyseus", "get_active_games")
end

local function update_refresh_button(button)
    if button.over_now then
        gui.play_flipbook(button.node, "refresh_button_hover")
    elseif button.out_now then
        gui.play_flipbook(button.node, "refresh_button")
    end
end

local function update_active_games_list(list)
    for _, item in pairs(list.items) do
        local button_node = item.nodes[hash("item_background")]
        
        if item == list.over_item then
            gui.play_flipbook(button_node, "mottle_button_hover")
        else
            gui.play_flipbook(button_node, "mottle_button")
        end
        
        if item.data and item.data ~= "" then
            local text_node = item.nodes[hash("game_id")]
            gui.set_text(text_node, item.data.metadata.gameAddress)
        end
    end
end

function on_input(self, action_id, action)
    -- GOOEY UI
    local group = gooey.group("observe_menu_group", function()
        gooey.button("refresh_button", action_id, action, function(button)
            get_active_games()
        end, update_refresh_button)

        gooey.button("back_button", action_id, action, function(button)
            monarch.replace("start_menu")
        end, update_button)

        local list = gooey.dynamic_list("list_background", "list_container", "item_container", Gamestate.active_games, action_id, action, nil, function(list)
            observe_game(list.data[list.selected_item.index])
        end, update_active_games_list)
        
        gooey.vertical_scrollbar("scroller_button", "scroller_background", action_id, action, function(scrollbar)
            list.scroll_to(0, scrollbar.scroll.y)
        end)
    end)

    -- KEYPRESSES
    if action.pressed then
        if action_id == hash("esc") then
            monarch.replace("start_menu")
        end
    end

    return group.consumed
end

function on_message(self, message_id, message)
    Gamestate.set_creating(false)

    if message_id == hash("reset_menu") then
        get_active_games()
    elseif message_id == hash("fetch_error") then
        hide_active_games_list()
        gui.set_color(info_node, red)
        gui.set_text(info_node, "Error: Could not retrieve live games from server.")
    elseif message_id == hash("join_error") then
        hide_active_games_list()
        gui.set_color(info_node, red)
        gui.set_text(info_node, "Error: Could not join game. Please refresh.")
    elseif message_id == hash("refresh_list") then
        if #Gamestate.active_games > 0 then
            show_active_games_list()
            gui.set_text(info_node, "")
        else
            hide_active_games_list()
            gui.set_text(info_node, "No live games are available.")
        end
    end
end

function init(self)
    gooey.acquire_input()

    info_node = gui.get_node("info_text")
    list_container_node = gui.get_node("list_container")
    scroller_container_node = gui.get_node("scroller_container")
    hide_active_games_list()

    gui.set_render_order(1)
end
