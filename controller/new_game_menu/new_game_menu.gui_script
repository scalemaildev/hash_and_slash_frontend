local gooey = require "gooey.gooey"
local monarch = require "monarch.monarch"
local Gamestate = require "game.gamestate.gamestate"

local info_node
local pwd
local rpwd

local red = vmath.vector4(1, 0, 0, 1)

function validate_password(password)
    if pwd.text == "" or rpwd.text == "" then
        gui.set_color(info_node, red)
        gui.set_text(info_node, "Fill out both password fields.")
        return false
    end
    
    if pwd.text ~= rpwd.text then
        gui.set_color(info_node, red)
        gui.set_text(info_node, "Passwords do not match.")
        return false 
    end

    if #pwd.text < 3 then
        gui.set_color(info_node, red)
        gui.set_text(info_node, "Password must be at least three characters.")
        return false
    end

    return true
end

function update_button(button)
    if button.over_now then
        gui.play_flipbook(button.node, "mottle_button_short_hover")
    elseif button.out_now then
        gui.play_flipbook(button.node, "mottle_button_short")
    end
end

function update_input(input)
    local placeholder_node
    local button_node
    
    if input.node_id == hash("password_text") then
        placeholder_node = gui.get_node("password_placeholder")
        button_node = gui.get_node("password_button")
    else
        placeholder_node = gui.get_node("repassword_placeholder")
        button_node = gui.get_node("repassword_button")
    end
    
    if #input.text > 0 then
        gui.set_alpha(placeholder_node, 0)
    else
        gui.set_alpha(placeholder_node, 0.75)
    end

    if input.selected then
        gui.play_flipbook(button_node, "input_field_active")
    else
        gui.play_flipbook(button_node, "input_field")
    end
end

function enter_password()
    if Gamestate.is_creating() == true then return end
    
    gui.set_text(info_node, "... Creating Game ...")
    Gamestate.set_creating(true)
    local valid_password = validate_password()

    if valid_password == true then
        msg.post("controller:/controller#colyseus", "create_new_game", { password = pwd.text })
        gui.set_color(info_node, vmath.vector4(0.878, 0.878, 0.878, 1))
    else
        Gamestate.set_creating(false)
    end
end

function on_input(self, action_id, action)
    -- KEYPRESSES
    if action.pressed then
        if action_id == hash("esc") then
            monarch.replace("start_menu")
        elseif action_id == hash("enter") then
            enter_password()
        elseif action_id == hash("tab") then
            if rpwd.selected == false then
                rpwd.selected = true
                pwd.selected = false
            else
                pwd.selected = true
                rpwd.selected = false
            end
        end
    end

    -- GOOEY UI
    local group = gooey.group("new_game_menu_group", function()
        pwd = gooey.input("password_text", gui.KEYBOARD_TYPE_PASSWORD, action_id, action, { max_length = 12 }, update_input)
        
        rpwd = gooey.input("repassword_text", gui.KEYBOARD_TYPE_PASSWORD, action_id, action, { max_length = 12 }, update_input)

        gooey.button("create_button", action_id, action, function()
            enter_password()
        end, update_button)

        gooey.button("back_button", action_id, action, function()
            monarch.replace("start_menu")
        end, update_button)
    end)

    return group.consumed
end

function on_message(self, message_id, message)
    if message_id == hash("connection_error") then
        gui.set_color(info_node, red)
        gui.set_text(info_node, "Error: Could not connect to the server.")
    elseif message_id == hash("creation_error") then
        gui.set_color(info_node, red)
        gui.set_text(info_node, "Error: Failed to create a new game.")
    elseif message_id == hash("reset_text") then
        gui.set_color(info_node, vmath.vector4(0.878, 0.878, 0.878, 1))
        gui.set_text(info_node, "Fill out both fields.")

        if pwd ~= nil then
            pwd.text = nil
            local pwd_node = gui.get_node("password_text")
            gui.set_text(pwd_node, "")
        end
        if rpwd ~= nil then
            rpwd.text = nil
            local rpwd_node = gui.get_node("repassword_text")
            gui.set_text(rpwd_node, "")
        end
    end
end

function init(self)
    gooey.acquire_input()

    info_node = gui.get_node("info_text")

    gui.set_render_order(1)
end