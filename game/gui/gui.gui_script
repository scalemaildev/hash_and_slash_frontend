local monarch = require "monarch.monarch"
local gooey = require "gooey.gooey"
local richtext = require "richtext.richtext"
local color = require "richtext.color"
local tags = require "richtext.tags"

local Gamestate = require "game.gamestate.gamestate"
local MessageReel = require "game.gamestate.message_reel"

local message_nodes = {}

local function update_round_text(new_round)
	local round_text = gui.get_node("round")
	gui.set_text(round_text, 'Round: ' .. new_round)
end

local function update_player_hp_text(hp, max_hp)
	local hp_text = gui.get_node("hp")
	gui.set_text(hp_text, 'HP: ' .. hp .. '/' .. max_hp)
end

local function create_richtext_message(key, message)
	local _y = 45 + (key * 20)
	local settings = {
		position = vmath.vector3(1175, _y, 0),
		outline = vmath.vector4(0, 0, 0, 1),
		align = richtext.ALIGN_CENTER,
		valign = richtext.VALIGN_BOTTOM,
		width = 300,
		combine_words = true
	}

	local rich_message = richtext.create(message, "agave_16_ol", settings)

	for _, message in ipairs(rich_message) do
		table.insert(message_nodes, message.node)
	end
end

local function update_message_reel()
	local messages = MessageReel.get()

	-- remove pre-existing message nodes
	for key, node in ipairs(message_nodes) do
		gui.delete_node(node)
		message_nodes[key] = nil
	end

	-- insert the new ones
	for i=1, #messages do
		local key = #messages + 1 - i
		local message = messages[key]
		local text = message.text

		if message.round ~= (Gamestate.get_round() - 1) then
			text = "<color=grey>" .. text .. "</color>"
		end
		
		local message_nodes = create_richtext_message(i, text)
	end
end

function update_button(button)
	if button.over_now then
		gui.play_flipbook(button.node, "mottle_button_hover")
	elseif button.out_now then
		gui.play_flipbook(button.node, "mottle_button")
	end
end

function on_input(self, action_id, action)
	if monarch.is_visible("quit_modal") or monarch.is_visible("controls_modal") then return end
	
	-- HOTKEYS
	if action.pressed then 
		if action_id == hash("esc") then
			monarch.show("quit_modal", {}, { quit_program = false })
		elseif action_id == hash("c") then
			monarch.show("controls_modal")
		end
	end

	-- GOOEY UI
	local group = gooey.group("game_ui_group", function()

		gooey.button("controls_button", action_id, action, function(button)
			monarch.show("controls_modal")
		end, update_button)

		gooey.button("quit_button", action_id, action, function(button)
			monarch.show("quit_modal", {}, { quit_program = false })
		end, update_button)
	end)

	return group.consumed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("update_round_text") then
		update_round_text(message.new_round)
	elseif message_id == hash("update_player_hp_text") then
		update_player_hp_text(message.hp, message.max_hp)
	elseif message_id == hash("update_message_reel") then
		update_message_reel()
	end
end

function init(self)
	gooey.acquire_input()

	gui.set_render_order(1)

	local game_id_node = gui.get_node("game_id")
	gui.set_text(game_id_node, "Game ID: " .. Gamestate.get_game_id())
end