local Gamestate = require "game.gamestate.gamestate"
local Geo = require "game.helpers.geo"

local WIDTH = sys.get_config("display.width")
local HEIGHT = sys.get_config("display.height")

function set_bounds(self)
	local x, y, w, h = Gamestate.get_bounds()
	
	x = x - 1
	y = y - 1
	self.bounds = vmath.vector4(x * 22, y * 33, w * 22, h * 33)
end

local function limit(self, pos)
	local left = self.bounds.x - (WIDTH / 4)
	local right = self.bounds.z + (WIDTH / 4)
	local top = self.bounds.w + (HEIGHT / 4)
	local bottom = self.bounds.y - (HEIGHT / 4)
	pos.x = math.min(pos.x, right)
	pos.x = math.max(pos.x, left)
	pos.y = math.min(pos.y, top)
	pos.y = math.max(pos.y, bottom)
	return pos
end

function on_input(self, action_id, action)
	if action.pressed and action_id == hash("right_click") then
		self.drag = true
		self.pressed_pos = vmath.vector3(action.x, action.y, 0)
		self.pressed_time = socket.gettime()
		self.camera_pos = go.get_position("/camera")
	elseif action.released then
		self.drag = false
	end

	if self.drag then
		local mouse_pos = vmath.vector3(action.x, action.y, 0)
		local pos = self.camera_pos + self.pressed_pos - vmath.vector3(action.x, action.y, 0)
		go.set_position(limit(self, pos), "/camera")
	end
end

function update(self)
	set_bounds(self)
end

function final(self)
	msg.post("/camera", "release_camera_focus")
	msg.post(".", "release_input_focus")
end

function init(self)
	msg.post("/camera", "acquire_camera_focus")
	msg.post(".", "acquire_input_focus")

	set_bounds(self)
end