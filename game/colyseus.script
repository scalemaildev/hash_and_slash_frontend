local ColyseusClient = require "colyseus.client"
local Gamestate = require "game.gamestate.gamestate"

local debug

local client
local room

local function join_room(room_id)
	client:join_by_id(room_id, { isObserver = false }, function(err, _room)
		if (err ~= nil) then
			print("join error: " .. err)
			return
		end

		room = _room

		-- Visible Coordinates
		room.state.visCoords['on_add'] = function (coord, key)
			Gamestate.set_vis_coord(coord, key)
			msg.post("/game#tiles", "untint_tile", { pos = coord })
		end

		room.state.visCoords['on_remove'] = function (coord, key)
			Gamestate.clear_vis_coord(coord, key)
			msg.post("/game#tiles", "tint_tile", { pos = coord })
		end

		-- Known Tiles
		room.state.tiles['on_add'] = function (tile, pos)
			msg.post("/game#tiles", "create_tile", { pos = pos, tile_type = tile.symbol })
		end
		
		room.state.tiles['on_remove'] = function (_, pos)
			msg.post("/game#tiles", "remove_tile", { pos = pos })
		end

		-- Entities
		---- listen for add/remove/onchange here

		-- Actors
		---- listen for add/remove/onchange here

		-- General State Updates
		room.state['on_change'] = function (changes)
			for _, change in pairs(changes) do
				if change.field == "round" then
					-- update round display
				end
			end
		end

		room:on_message("setGameActive", function(message)
			--
		end)

		room:on_message("updateObsCount", function(message)
			--
		end)
	end)
end

local function setup_colyseus()
	if debug then
		client = ColyseusClient.new("ws://localhost:2567")
	else
		client = ColyseusClient.new("wss://dpbtbu.us-east-vin.colyseus.net")
	end

	local room_id = Gamestate.get_room_id()
	join_room(room_id)
end

function init(self)
	debug = sys.get_engine_info().is_debug
	
	setup_colyseus()
end